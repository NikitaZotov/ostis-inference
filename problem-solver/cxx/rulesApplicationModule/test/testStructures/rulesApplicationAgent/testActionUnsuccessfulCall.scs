//types
sc_node_role_relation
    -> rrel_main_key_sc_element;;
sc_node_norole_relation
    -> nrel_connected_elements;
    -> nrel_connection;
    -> nrel_equivalence;
    -> nrel_conjunction;;
sc_node_not_relation
    -> action_apply_rules_on_the_model;
    -> concept_topological_node;
    -> action_check_connection;;
sc_node_structure
    -> test_output_structure;;

//initial model
@test_input_structure = [*
    first_equipment_piece
        => nrel_connector: first_connector;
        <- concept_equipment;;
    second_equipment_piece
        => nrel_connector: second_connector;
        <- concept_equipment;;
*];;

//action description
test_action
    <- action_apply_rules_on_the_model;
    -> rrel_1: test_rule_set (* -> test_rule_1;; *);
    -> rrel_2: @test_input_structure;
    -> rrel_3: test_output_structure;;

//first rule
@rule_1_first_structure = [*
    concept_equipment
        _-> _first_equipment_piece;
        _-> _second_equipment_piece;;
*];;

@rule_1_second_structure = [*
    _first_equipment_piece _<=> nrel_connected_elements:: _second_equipment_piece;;
*];;
@rule_1_second_structure <- concept_logic_statement_checking_by_action;;

@rule_1_third_structure = [*
    concept_topological_node _-> _topological_node;;
    _topological_node
        _-> _first_equipment_piece;
        _-> _second_equipment_piece;;
*];;

..conjunction_node
    <- sc_node_tuple;
    <- nrel_conjunction;
    -> @rule_1_first_structure;
    -> @rule_1_second_structure;;

@rule_1_equivalence_pair = (..conjunction_node <=> @rule_1_third_structure);;
@rule_1_equivalence_pair <- nrel_equivalence;;
@rule_1_equivalence_pair <- rrel_main_key_sc_element: test_rule_1;;

action_check_connection => nrel_action_possible_result: nrel_connected_elements;;
